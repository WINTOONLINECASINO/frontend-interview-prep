question,answer,category,difficulty,tags
"What are Angular elements?","Angular elements are Angular components packaged as custom elements (a web standard for defining new HTML elements in a framework-agnostic way). Angular Elements host an Angular component, providing a bridge between the data and the logic defined in the component and the standard DOM APIs, thus, providing a way to use Angular components in non-Angular environments.","Angular Elements","easy","angular;elements"
"What is the browser support of Angular Elements?","Since Angular elements are packaged as custom elements the browser support of angular elements is same as custom elements support.","General","intermediate","general"
"What are custom elements?","Custom elements (or Web Components) are a Web Platform feature which extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. The browser maintains a CustomElementRegistry of defined custom elements, which maps an instantiable JavaScript class to an HTML tag. Currently this feature is supported by Chrome, Firefox, Opera, and Safari, and available in other browsers through polyfills.","Angular Elements","hard","elements"
"Do I need to bootstrap custom elements?","No, custom elements bootstrap (or start) automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element, and does not require any special knowledge of Angular.","Angular Elements","hard","elements"
"Explain how custom elements works internally?","Below are the steps in an order about custom elements functionality,","General","intermediate","general"
"How to transfer components to custom elements?","Transforming components to custom elements involves two major steps,","General","intermediate","general"
"What are the mapping rules between Angular component and custom element?","The Component properties and logic maps directly into HTML attributes and the browser's event system. Let us describe them in two steps,","General","intermediate","general"
"How do you define typings for custom elements?","You can use the NgElement and WithProperties types exported from @angular/elements.","General","intermediate","general"
"What are dynamic components?","Dynamic components are the components in which the component's location in the application is not defined at build time i.e. they are not used in any angular template. Instead, the component is instantiated and placed in the application at runtime.","Components","easy","component"
"What are the various kinds of directives?","There are mainly three kinds of directives:","General","intermediate","general"
"How do you create directives using CLI?","You can use CLI command ng generate directive to create the directive class file. It creates the source file(src/app/components/directivename.directive.ts), the respective test file .spec.ts and declare the directive class file in root module.","Directives","easy","cli;directive;di"
"Give an example for attribute directives?","Let's take simple highlighter behavior as a example directive for DOM element. You can create and apply the attribute directive using below step:","General","intermediate","general"
"What is Angular Router?","Angular Router is a mechanism in which navigation happens from one view to the next as users perform application tasks. It borrows the concepts or model of browser's application navigation. It enables developers to build Single Page Applications with multiple views and allow navigation between these views.","Routing","intermediate","angular;router"
"What is the purpose of base href tag?","The routing application should add element to the index.html as the first child in the tag in order to indicate how to compose navigation URLs. If app folder is the application root then you can set the href value as below","General","intermediate","general"
"What are the router imports?","The Angular Router which represents a particular component view for a given URL is not part of Angular Core. It is available in library named @angular/router to import required router components. For example, we import them in app module as below,","General","intermediate","general"
"What is router outlet?","The RouterOutlet is a directive from the router library and it acts as a placeholder that marks the spot in the template where the router should display the components for that outlet. Router outlet is used like a component,","General","intermediate","general"
"What are router links?","The RouterLink is a directive on the anchor tags give the router control over those elements. Since the navigation paths are fixed, you can assign string values to router-link directive as below,","General","intermediate","general"
"What are active router links?","RouterLinkActive is a directive that toggles css classes for active RouterLink bindings based on the current RouterState. i.e, The Router will add CSS classes when this link is active and remove when the link is inactive. For example, you can add them to RouterLinks as below.","General","intermediate","general"
"What is router state?","RouterState is a tree of activated routes. Every node in this tree knows about the consumed URL segments, the extracted parameters, and the resolved data. You can access the current RouterState from anywhere in the application using the Router service and the routerState property.","General","intermediate","general"
"What are router events?","During each navigation, the Router emits navigation events through the Router.events property allowing you to track the lifecycle of the route.","General","intermediate","general"
"What is activated route?","ActivatedRoute contains the information about a route associated with a component loaded in an outlet. It can also be used to traverse the router state tree. The ActivatedRoute will be injected as a router service to access the information. In the below example, you can access route path and parameters,","General","intermediate","general"
"How do you define routes?","A router must be configured with a list of route definitions. You configures the router with routes via the RouterModule.forRoot() method, and adds the result to the AppModule's imports array.","General","intermediate","general"
"What is the purpose of Wildcard route?","If the URL doesn't match any predefined routes then it causes the router to throw an error and crash the app. In this case, you can use wildcard route. A wildcard route has a path consisting of two asterisks to match every URL.","General","intermediate","general"
"Do I need a Routing Module always?","No, the Routing Module is a design choice. You can skip routing Module (for example, AppRoutingModule) when the configuration is simple and merge the routing configuration directly into the companion module (for example, AppModule). But it is recommended when the configuration is complex and includes specialized guard and resolver services.","Modules","easy","module"
"What is Angular Universal?","Angular Universal is a server-side rendering module for Angular applications in various scenarios. This is a community driven project and available under @angular/platform-server package. Recently Angular Universal is integrated with Angular CLI.","Angular Basics","easy","angular"
"What are different types of compilation in Angular?","Angular offers two ways to compile your application,","General","intermediate","general"
"What is JIT?","Just-in-Time (JIT) is a type of compilation that compiles your app in the browser at runtime. JIT compilation was the default until Angular 8, now default is AOT. When you run the ng build (build only) or ng serve (build and serve locally) CLI commands, the type of compilation (JIT or AOT) depends on the value of the aot property in your build configuration specified in angular.json. By default, aot is set to true.","Compilation/AOT","hard","jit"
"What is AOT?","Ahead-of-Time (AOT) is a type of compilation that compiles your app at build time. This is the default starting in Angular 9. When you run the ng build (build only) or ng serve (build and serve locally) CLI commands, the type of compilation (JIT or AOT) depends on the value of the aot property in your build configuration specified in angular.json. By default, aot is set to true.","General","intermediate","general"
"Why do we need compilation process?","The Angular components and templates cannot be understood by the browser directly. Due to that Angular applications require a compilation process before they can run in a browser. For example, In AOT compilation, both Angular HTML and TypeScript code converted into efficient JavaScript code during the build phase before browser runs it.","Compilation/AOT","easy","angular"
"What are the advantages with AOT?","Below are the list of AOT benefits,","General","intermediate","general"
"What are the ways to control AOT compilation?","You can control your app compilation in two ways,","General","intermediate","general"
"What are the restrictions of metadata?","In Angular, You must write metadata with the following general constraints,","General","intermediate","general"
"What are the three phases of AOT?","The AOT compiler works in three phases,","General","intermediate","general"
"Can I use arrow functions in AOT?","No, Arrow functions or lambda functions canâ€™t be used to assign values to the decorator properties. For example, the following snippet is invalid:","General","intermediate","general"
"What is the purpose of metadata json files?","The metadata.json file can be treated as a diagram of the overall structure of a decorator's metadata, represented as an abstract syntax tree(AST). During the analysis phase, the AOT collector scan the metadata recorded in the Angular decorators and outputs metadata information in .metadata.json files, one per .d.ts file.","Compilation/AOT","hard","angular"
"Can I use any javascript feature for expression syntax in AOT?","No, the AOT collector understands a subset of (or limited) JavaScript features. If an expression uses unsupported syntax, the collector writes an error node to the .metadata.json file. Later point of time, the compiler reports an error if it needs that piece of metadata to generate the application code.","Compilation/AOT","hard","aot"
"What is folding?","The compiler can only resolve references to exported symbols in the metadata. Where as some of the non-exported members are folded while generating the code. i.e Folding is a process in which the collector evaluate an expression during collection and record the result in the .metadata.json instead of the original expression. For example, the compiler couldn't refer selector reference because it is not exported","General","intermediate","general"
"What are macros?","The AOT compiler supports macros in the form of functions or static methods that return an expression in a single return expression. For example, let us take a below macro function,","General","intermediate","general"
"Give an example of few metadata errors?","Below are some of the errors encountered in metadata,","General","intermediate","general"
"What is metadata rewriting?","Metadata rewriting is the process in which the compiler converts the expression initializing the fields such as useClass, useValue, useFactory, and data into an exported variable, which replaces the expression. Remember that the compiler does this rewriting during the emit of the .js file but not in definition files( .d.ts file).","Compilation/AOT","hard","angular"
"How do you provide configuration inheritance?","Angular Compiler supports configuration inheritance through extends in the tsconfig.json on angularCompilerOptions. i.e, The configuration from the base file(for example, tsconfig.base.json) are loaded first, then overridden by those in the inheriting config file.","General","intermediate","general"
"How do you specify angular template compiler options?","The angular template compiler options are specified as members of the angularCompilerOptions object in the tsconfig.json file. These options will be specified adjacent to typescript compiler options.","General","intermediate","general"
"How do you enable binding expression validation?","You can enable binding expression validation explicitly by adding the compiler option fullTemplateTypeCheck in the angularCompilerOptions of the project's tsconfig.json. It produces error messages when a type error is detected in a template binding expression.","General","intermediate","general"
"What is the purpose of any type cast function?","You can disable binding expression type checking using $any() type cast function(by surrounding the expression). In the following example, the error Property contacts does not exist is suppressed by casting user to the any type.","General","intermediate","general"
"What is Non null type assertion operator?","You can use the non-null type assertion operator to suppress the Object is possibly 'undefined' error. In the following example, the user and contact properties are always set together, implying that contact is always non-null if user is non-null. The error is suppressed in the example by using contact!.email.","General","intermediate","general"
"How is type narrowing applied in templates?","The expression used in an ngIf directive is used to narrow type unions in the Angular template compiler similar to if expression in typescript. So *ngIf allows the typeScript compiler to infer that the data used in the binding expression will never be undefined.","General","intermediate","general"
"How do you describe various dependencies in angular application?","The dependencies section of package.json with in an angular application can be divided as follow,","General","intermediate","general"
"What is zone?","A Zone is an execution context that persists across async tasks. Angular relies on zone.js to run Angular's change detection processes when native JavaScript operations raise events","Dependency Injection","intermediate","zone"
"What is the purpose of common module?","The commonly-needed services, pipes, and directives provided by @angular/common module. Apart from these HttpClientModule is available under @angular/common/http.","Modules","easy","module"
"What is codelyzer?","Codelyzer provides set of tslint rules for static code analysis of Angular TypeScript projects. You can run the static code analyzer over web apps, NativeScript, Ionic etc. Angular CLI has support for this and it can be use as below,","General","intermediate","general"