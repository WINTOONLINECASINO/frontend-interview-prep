question,answer,category,difficulty,tags
"Do you prefer declarative or imperative programming?","You might say this is a theoretical question, and it is, but I like to ask it because it reveals how candidates think about code structure and maintainability. Most candidates respond with, “I don't know the difference”.","General","intermediate","general"
"Would you use a state management library or a custom implementation?","The question is designed to brainstorm with the candidate. Some developers lean toward libraries like NgRx, Akita, or NGXS, while others prefer simpler, custom built state solutions using services, RxJS or signals. Both approaches are valid. What I'm really curious about is whether the candidate can justify their choice, present some trade-offs, and mention potential drawbacks of the alternative.","General","intermediate","general"
"How would you achieve a parent - child component communication ?","A simple question with a catch. Most candidates mention @Input()/@Output() bindings, or using a shared service with a Subject or a signal for communication.","General","intermediate","general"
"What is the role of NgZone in Angular, and when would you opt out of Angular's change detection?","The answer on this question can really demonstrate the candidate skills and the level of projects he has work on. You rarely run code outside of Angular's change detection, you consider it when you run into performance issues.","General","intermediate","general"
"What is and when to use an Injection Token ?","An InjectionToken is like a unique identifier or a name tag that Angular uses to locate and provide a specific value or service during dependency injection. You typically use new InjectionToken() when you want to provide a value that isn't a class such as a configuration object, primitive value, or interface-based dependency.","General","intermediate","general"
"What are resolution modifiers and how to use them ?","When injecting a dependency using inject(), Angular lets you pass resolution modifiers: optional, self, skipSelf, and host.","General","intermediate","general"
"Why would you use a track function in a for-loop and how it works ?","Tracking stabilizes DOM updates for lists. Without it, reloading an array recreates DOM nodes, causing flicker and wasted work.","General","intermediate","general"
"What is the the difference between providers and viewProviders ? Can you provide an example when to use either of them ?","**providers** scope to the component, its template, children, and projected content.","General","intermediate","general"
"Why pipes are considered safe in a template, but regular function calls (not signals) are not ?","Pure pipes run only when their inputs change and internally cache results, making them efficient in templates. Regular function calls execute each change detection cycle, potentially many times per second.","General","intermediate","general"
"How would you convince your team to migrate a project from Observables to signals ?","“Angular—and the wider ecosystem—is moving toward signals (there’s even a TC39 proposal). New Angular APIs (e.g., Resource API) are signal-first. Signals simplify state, letting you subscribe and synchronously read current values. Migration reduces boilerplate and avoids common Rx pitfalls while interoperating where RxJS still shines.”","General","intermediate","general"
"Can you explain the diamond problem in Observables and why it doesn't occur with signals?","With RxJS, graphs using shared dependencies (e.g., `combineLatest`) emit once per dependency change; batched updates can cause duplicate emissions (diamond problem).","General","intermediate","general"
"When to use effect and untracked in a signal based application ?","Use `effect` when one side is reactive and the other is not (DOM APIs, analytics, non-reactive libs). To prevent feedback loops, wrap non-dependency reads/writes in `untracked`. For DOM timing, `afterRenderEffect` runs post-render.","General","intermediate","general"
"Are life-cycle hooks still needed in a fully signal based application ?","Many hooks can be replaced:","General","intermediate","general"
"What is a higher-order observable and how they differ ?","Higher‑order operators control how inner observables are subscribed:","General","intermediate","general"
"What is the difference between share() and shareReplay() ?","Both multicasts to multiple subscribers and avoid duplicate side effects.","General","intermediate","general"
"What does this code do ? - scan() + expand()","Implements recursive, paged loading with accumulation:","General","intermediate","general"
"What other notable questions may be?","- Describe a time you had to refactor legacy code in Angular, how did you approach it?","General","intermediate","general"
"“Can you tell us about some more complex feature you have worked on in the past 1–2 years? What was the problem","and how did you solve it?”","General","intermediate","general"